\nimport json\nfrom typing import Optional\nfrom .core.redis_client import get_redis_client\n\n# --- Key Definitions for Autotrade Settings ---\n# This is the single source of truth for all user-configurable settings.\nKEY_DEFINITIONS = {\n    # Grand Campaign Goal\n    \"portfolio_target_usdt\": {\n        \"name\": \"Portfolio Target (USDT)\",\n        \"default\": 0.0,  # 0.0 means the campaign is continuous and has no end target.\n        \"type\": float,\n        \"min\": 0.0,\n        \"max\": 10000000.0,\n        \"description\": \"The autotrader will run until your portfolio value reaches this target. Set to 0 to run continuously.\"\n    },\n    # Core Trading Strategy\n    \"profit_target_percentage\": {\n        \"name\": \"Initial Profit Target (%)\",\n        \"default\": 3.0,\n        \"type\": float,\n        \"min\": 0.5,\n        \"max\": 100.0,\n        \"description\": \"The profit percentage that arms the trailing stop loss.\"\n    },\n    \"stop_loss_percentage\": {\n        \"name\": \"Stop Loss (%)\",\n        \"default\": 5.0,\n        \"type\": float,\n        \"min\": 0.5,\n        \"max\": 50.0,\n        \"description\": \"The absolute maximum loss before a position is sold.\"\n    },\n    # Trailing Stop (The Dragon)\n    \"trailing_activation_percentage\": {\n        \"name\": \"Trailing Activation (%)\",\n        \"default\": 1.0,\n        \"type\": float,\n        \"min\": 0.1,\n        \"max\": 50.0,\n        \"description\": \"Percentage the price must rise above the initial profit target to activate the trailing stop.\"\n    },\n    \"trailing_stop_drop_percentage\": {\n        \"name\": \"Trailing Stop Drop (%)\",\n        \"default\": 0.5,\n        \"type\": float,\n        \"min\": 0.1,\n        \"max\": 20.0,\n        \"description\": \"The percentage the price can drop from its peak before selling to lock in profit.\"\n    },\n    # Tactical Controls\n    \"trade_size_usdt\": {\n        \"name\": \"Trade Size (USDT)\",\n        \"default\": 10.0,\n        \"type\": float,\n        \"min\": 5.0,\n        \"max\": 100000.0,\n        \"description\": \"The amount of USDT to use for each individual trade.\"\n    },\n    \"max_hold_time\": {\n        \"name\": \"Max Hold Time (seconds)\",\n        \"default\": 86400,  # 24 hours\n        \"type\": int,\n        \"min\": 300,  # 5 minutes\n        \"max\": 2592000,  # 30 days\n        \"description\": \"Maximum time to hold a position before a tactical retreat (sell).\"\n    },\n}\n\ndef get_user_settings(user_id: int) -> dict:\n    \"\"\"Fetches a user\'s settings from Redis.\"\"\"\n    client = get_redis_client()\n    if not client:\n        return {}\n    key = f\"autotrade:settings:{user_id}\"\n    stored_settings = client.get(key)\n    if stored_settings:\n        return json.loads(stored_settings)\n    return {}\n\ndef get_effective_settings(user_id: int) -> dict:\n    \"\"\"Merges user-specific settings with system defaults to get the final active settings.\"\"\"\n    defaults = {key: details[\'default\'] for key, details in KEY_DEFINITIONS.items()}\n    user_specific = get_user_settings(user_id)\n    return {**defaults, **user_specific}\n\ndef validate_and_set(user_id: int, key: str, value_str: str) -> tuple[bool, str]:\n    \"\"\"Validates a new setting and, if valid, saves it for the user.\"\"\"\n    key = key.lower()\n    if key not in KEY_DEFINITIONS:\n        return False, f\"Unknown setting \'{key}\'.\"\n\n    spec = KEY_DEFINITIONS[key]\n    try:\n        # Coerce value to the correct type\n        if spec[\'type\'] is float:\n            coerced_value = float(value_str)\n        elif spec[\'type\'] is int:\n            coerced_value = int(value_str)\n        else:\n            coerced_value = value_str\n    except ValueError:\n        return False, f\"Invalid value for {spec[\'name\']}. Expected a {spec[\'type\__.__name__]}.\"\n\n    # Validate range\n    if \'min\' in spec and coerced_value < spec[\'min\']:\n        return False, f\"{spec[\'name\']} cannot be less than {spec[\'min\']}.\"\n    if \'max\' in spec and coerced_value > spec[\'max\']:\n        return False, f\"{spec[\'name\']} cannot be more than {spec[\'max\']}.\"\n\n    # Persist the validated setting\n    client = get_redis_client()\n    if not client:\n        return False, \"Error: Could not connect to settings database.\"\n\n    redis_key = f\"autotrade:settings:{user_id}\"\n    current_settings = get_user_settings(user_id)\n    current_settings[key] = coerced_value\n\n    # Inter-field validation for the trailing stop\n    trailing_activation = current_settings.get(\'trailing_activation_percentage\', KEY_DEFINITIONS[\'trailing_activation_percentage\'][\'default\'])\n    trailing_drop = current_settings.get(\'trailing_stop_drop_percentage\', KEY_DEFINITIONS[\'trailing_stop_drop_percentage\'][\'default\'])\n\n    if trailing_drop >= trailing_activation:\n        return False, \"Validation Error: Trailing Stop Drop must be less than the Trailing Activation percentage.\"\n\n    try:\n        client.set(redis_key, json.dumps(current_settings))\n        return True, f\"âœ… {spec[\'name\']} has been set to {coerced_value}.\"\n    except Exception as e:\n        return False, f\"Error saving setting: {e}\"\n